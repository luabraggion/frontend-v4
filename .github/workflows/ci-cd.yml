# 🚀 CI/CD Pipeline para Next.js
name: CI/CD

# Triggers do workflow
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Variáveis de ambiente
env:
  NODE_VERSION: "22"
  CACHE_NAME: nextjs-cache

jobs:
  # 🔍 Job de Verificação de Qualidade
  quality-check:
    name: 📋 Verificação de Qualidade
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      # Setup do Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Instalar dependências
      - name: 📦 Instalar Dependências
        run: npm ci

      # Verificação de tipos TypeScript
      - name: 🔍 Verificar Tipos TypeScript
        run: npm run type-check

      # Linting
      - name: 🧹 Executar ESLint
        run: npm run lint

      # Verificar formatação
      - name: 🎨 Verificar Formatação Prettier
        run: npm run format:check

  # 🏗️ Job de Build
  build:
    name: 🏗️ Build da Aplicação
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      # Checkout do código
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      # Setup do Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Cache do .next folder
      - name: 💾 Cache Next.js Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      # Instalar dependências
      - name: 📦 Instalar Dependências
        run: npm ci

      # Build da aplicação
      - name: 🏗️ Build Next.js
        run: npm run build

      # Upload dos artefatos de build
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  # 🧪 Job de Testes (preparado para futuro)
  test:
    name: 🧪 Executar Testes
    runs-on: ubuntu-latest
    needs: quality-check
    if: false # Desabilitado até implementar testes

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar Dependências
        run: npm ci

      - name: 🧪 Executar Testes
        run: npm run test

  # 📊 Job de Análise de Bundle (opcional)
  bundle-analysis:
    name: 📊 Análise de Bundle
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar Dependências
        run: npm ci

      - name: 📊 Análise de Bundle
        run: npm run build:analyze
        env:
          ANALYZE: true

  # 🚀 Job de Deploy (preparado para futuro)
  deploy:
    name: 🚀 Deploy para Produção
    runs-on: ubuntu-latest
    needs: [quality-check, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      # Download dos artefatos de build
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      # Aqui você adicionaria os passos específicos do seu provedor de deploy
      # Exemplos: Vercel, Netlify, AWS, etc.
      - name: 🚀 Deploy
        run: |
          echo "🚀 Deploy seria executado aqui"
          echo "📦 Arquivos de build prontos para deploy"
